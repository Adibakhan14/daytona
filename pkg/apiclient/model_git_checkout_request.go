/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GitCheckoutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitCheckoutRequest{}

// GitCheckoutRequest struct for GitCheckoutRequest
type GitCheckoutRequest struct {
	Branch string `json:"branch"`
	Path   string `json:"path"`
}

type _GitCheckoutRequest GitCheckoutRequest

// NewGitCheckoutRequest instantiates a new GitCheckoutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCheckoutRequest(branch string, path string) *GitCheckoutRequest {
	this := GitCheckoutRequest{}
	this.Branch = branch
	this.Path = path
	return &this
}

// NewGitCheckoutRequestWithDefaults instantiates a new GitCheckoutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCheckoutRequestWithDefaults() *GitCheckoutRequest {
	this := GitCheckoutRequest{}
	return &this
}

// GetBranch returns the Branch field value
func (o *GitCheckoutRequest) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *GitCheckoutRequest) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *GitCheckoutRequest) SetBranch(v string) {
	o.Branch = v
}

// GetPath returns the Path field value
func (o *GitCheckoutRequest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *GitCheckoutRequest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *GitCheckoutRequest) SetPath(v string) {
	o.Path = v
}

func (o GitCheckoutRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitCheckoutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["branch"] = o.Branch
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *GitCheckoutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"branch",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitCheckoutRequest := _GitCheckoutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitCheckoutRequest)

	if err != nil {
		return err
	}

	*o = GitCheckoutRequest(varGitCheckoutRequest)

	return err
}

type NullableGitCheckoutRequest struct {
	value *GitCheckoutRequest
	isSet bool
}

func (v NullableGitCheckoutRequest) Get() *GitCheckoutRequest {
	return v.value
}

func (v *NullableGitCheckoutRequest) Set(val *GitCheckoutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCheckoutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCheckoutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCheckoutRequest(val *GitCheckoutRequest) *NullableGitCheckoutRequest {
	return &NullableGitCheckoutRequest{value: val, isSet: true}
}

func (v NullableGitCheckoutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCheckoutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
